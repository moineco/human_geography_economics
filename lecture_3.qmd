# Geocoding for survey and natural experiment

R’s flexibility and evolving geographic capabilities is interactive map making. This is demonstrated by the following code chunk, which creates @fig-mymap-3.

```{r fig-mymap-3, cache = FALSE, echo = TRUE}
#| code-fold: true
#| fig.cap: "The blue markers indicate some specific geographic locations. The basemap is a tiled image of the Earth at night provided by NASA."
library(leaflet)
popup = c("Robin", "Jakub", "Jannes")
leaflet() |>
  addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") |>
  addMarkers(lng = c(-3, 23, 11),
             lat = c(52, 53, 49), 
             popup = popup)
```
The use of R code, therefore, enables teaching geocomputation with reference to reproducible examples representing real world phenomena, rather than just abstract concepts.

### To install the necessary packages for lecture three:

>  remotes::install_github("geocompr/geocompkg"). 

This command uses the function install_packages() from the remotes package to install source code hosted on the GitHub code hosting, version and collaboration platform. 

### To install necessary packages for the entire lectures:

>  remotes::install_github("geocompr/geocompkg", dependencies = TRUE)

The above command will install all dependencies required to reproduce the entire lecture

## Use the package **sf** 

```{r}
library(sf)
library(spData)       
library(spDataLarge)   
```

We will use the world dataset provided by spData, loaded at the beginning of this chapter, to show what sf objects are and how they work. world is an ‘sf data frame’ containing spatial and attribute columns, the names of which are returned by the function names() (the last column in this example contains the geographic information):

```{r}
class(world)
names(world)
```

We will plot this **world** class by using *plot()* 

```{r, warning=FALSE, message=FALSE}
plot(world)
```

